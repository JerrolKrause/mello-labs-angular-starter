declare namespace NtsScripter {
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v12.0.12.0 (NJsonSchema v9.13.15.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
  
    interface AgentLoginRequest {
      userName: string;
      password: string;
    }
  
    interface AgentLoginResponse {
      agent?: Agent;
      dialerSessionId?: string;
      token?: string;
      dialerEndpoint?: string;
      expires?: Date;
      isAvailable?: boolean;
      isAdmin?: boolean;
    }
  
    interface Agent {
      guid?: string;
      userName?: string;
      userId?: string;
      displayName?: string;
      firstName?: string;
      lastName?: string;
      email?: string;
      phone?: string;
      mobile?: string;
      location?: string;
    }
  
    interface Call {
      guid?: string;
      externalId?: string;
      dataSequenceNum?: number;
      leadGuid?: string;
      campaignGuid?: string;
      currentAgentGuid?: string;
      currentOpenPanelGuid?: string;
      disposition?: CallDisposition;
      dateInitiated?: Date;
      dateLastTransferred?: Date;
      dateEnded?: Date;
      dataItems?: CallDataItem[];
    }
  
    interface CallDisposition {
      code?: string;
      note?: string;
      reasonCode?: string;
      competitorCode?: string;
      competitorName?: string;
      callbackDate?: Date;
      callbackContactCode?: string;
    }
  
    interface CallDataItem {
      agentConfirmed?: boolean;
      name?: string;
      valueText?: string;
      valueFixed?: number;
      valueNumeric?: number;
      valueInt?: number;
      valueBool?: boolean;
      valueDateTime?: Date;
      valueDate?: Date;
      callGuid?: string;
      dataFieldGuid?: string;
      dataField?: DataField;
    }
  
    interface DataField {
      guid?: string;
      name?: string;
      displayName?: string;
      description?: string;
      fieldType?: DataFieldFieldType;
      isSystem?: boolean;
      sendWithCall?: boolean;
      boolValueTrue?: string;
      boolValueFalse?: string;
      boolValueIsNum?: boolean;
      numberIsInt?: boolean;
      numberDecimalPlaces?: number;
      enumerationAllowsCustom?: boolean;
      enumerationListGuid?: string;
    }
  
    interface DispositionCallRequest {
      disposition: CallDisposition;
    }
  
    interface UpdateCallDataRequest {
      items: { [key: string]: Item };
      newNotes?: string[];
      isAgentUpdate?: boolean;
    }
  
    interface Item {
      agentConfirmed?: boolean;
      value: string;
    }
  
    interface CallNotesResponse {
      notes?: CallNote[];
    }
  
    export interface CallNote {
      guid?: string;
      inserted?: string;
      agentGuid?: string;
      note?: string;
      isPrimary?: boolean;
    }
    export const CallNote = t.partial({
      guid: t.string,
      inserted: t.string,
      agentGuid: t.string,
      note: t.string,
      isPrimary: t.boolean,
    });
  
    interface CreateNoteRequest {
      note: CallNote;
    }
  
    interface UpdateNoteRequest {
      note: string;
    }
  
    interface CallPanelsResponse {
      panels?: PanelWithContent[];
      dataSequenceNum?: number;
    }
  
    interface PanelWithContent {
      panelContents?: PanelContentWithValue[];
      panelButtons?: PanelButton[];
      isOpen?: boolean;
      guid?: string;
      name?: string;
      description?: string;
    }
  
    interface PanelContentWithValue {
      value?: string;
      guid?: string;
      panelGuid?: string;
      isNoteToAgent?: boolean;
      text?: string;
      isNewLine?: boolean;
      addNote?: string;
      dataFieldGuid?: string;
      dataFieldName?: string;
      dataFieldRequired?: boolean;
      dataFieldIsRO?: boolean;
    }
  
    interface PanelButton {
      guid?: string;
      panelGuid?: string;
      isWarmTransferBtn?: boolean;
      dispositionBtn?: string;
      goToPanelGuid?: string;
      goToPanelText?: string;
      goToPanelIsPositive?: boolean;
    }
  
    interface PanelActionResponse {
      dataSequence?: number;
      openPanelGuid?: string;
      updatedData?: CallDataItem[];
      newNotes?: CallNote[];
      missingRequiredFields?: string[];
      needsConfirmFields?: string[];
    }
  
    interface Campaign {
      guid?: string;
      name?: string;
      description?: string;
      selectorRuleGuid?: string;
      isEnabled?: boolean;
    }
  
    interface CreateCampaignRequest {
      campaign: Campaign;
      position?: EntityPosition;
    }
  
    interface EntityPosition {
      placeAfter: string;
      placeFirst?: boolean;
    }
  
    interface UpdateCampaignRequest {
      campaign: Campaign;
      position?: EntityPosition;
    }
  
    interface YesNoResponse {
      answer: boolean;
    }
  
    interface ExportCampaignResponse {
      exportVersion?: number;
      campaign?: CampaignExt;
      panels?: PanelExt[];
      dataFields?: DataFieldExt[];
    }
  
    interface CampaignExt {
      campaignPanelRules?: CampaignPanelRuleExt[];
      selectorRule?: ScripterRule;
      guid?: string;
      name?: string;
      description?: string;
      selectorRuleGuid?: string;
      isEnabled?: boolean;
    }
  
    interface PanelExt {
      panelContents?: PanelContent[];
      panelButtons?: PanelButton[];
      panelRules?: PanelRuleExt[];
      guid?: string;
      name?: string;
      description?: string;
    }
  
    interface DataFieldExt {
      enumeration?: DataFieldEnumeration;
      guid?: string;
      name?: string;
      displayName?: string;
      description?: string;
      fieldType?: DataFieldExtFieldType;
      isSystem?: boolean;
      sendWithCall?: boolean;
      boolValueTrue?: string;
      boolValueFalse?: string;
      boolValueIsNum?: boolean;
      numberIsInt?: boolean;
      numberDecimalPlaces?: number;
      enumerationAllowsCustom?: boolean;
      enumerationListGuid?: string;
    }
  
    interface CampaignPanelRuleExt {
      rule?: ScripterRule;
      guid?: string;
      campaignGuid?: string;
      ruleGuid?: string;
      actionOpenPanelGuid?: string;
    }
  
    interface ScripterRule {
      guid?: string;
      name?: string;
      description?: string;
      panelCompleteRule?: boolean;
      expression?: ScripterRuleExpr;
    }
  
    interface PanelContent {
      guid?: string;
      panelGuid?: string;
      isNoteToAgent?: boolean;
      text?: string;
      isNewLine?: boolean;
      addNote?: string;
      dataFieldGuid?: string;
      dataFieldName?: string;
      dataFieldRequired?: boolean;
      dataFieldIsRO?: boolean;
    }
  
    interface PanelRuleExt {
      rule?: ScripterRule;
      guid?: string;
      panelGuid?: string;
      ruleGuid?: string;
      actionOpenPanelGuid?: string;
    }
  
    interface DataFieldEnumeration {
      guid?: string;
      name?: string;
      description?: string;
      values?: DataFieldEnumerationValue[];
    }
  
    interface ScripterRuleExpr {
      guid?: string;
      left?: ScripterRuleOperand;
      op?: RuleExprOp;
      right?: ScripterRuleOperand;
    }
  
    interface DataFieldEnumerationValue {
      value?: string;
      altText?: string;
    }
  
    interface ScripterRuleOperand {
      dataItemName?: string;
      compareValue?: string;
      ruleExpr?: ScripterRuleExpr;
    }
  
    enum RuleExprOp {
      AN = 'AN',
      OR = 'OR',
      GT = 'GT',
      GE = 'GE',
      EQ = 'EQ',
      NE = 'NE',
      LT = 'LT',
      LE = 'LE',
      IN = 'IN',
      NI = 'NI',
    }
  
    interface EntityCreatedResponse {
      newGuid: string;
    }
  
    interface CampaignPanelRule {
      guid?: string;
      campaignGuid?: string;
      ruleGuid?: string;
      actionOpenPanelGuid?: string;
    }
  
    interface CreateCampaignPanelRuleRequest {
      campaignPanelRule: CampaignPanelRule;
      position?: EntityPosition;
    }
  
    interface GetPanelResponse {
      panelContents?: PanelContent[];
      panelButtons?: PanelButton[];
      panelRules?: PanelRuleExt[];
      guid?: string;
      name?: string;
      description?: string;
    }
  
    interface CreatePanelRequest {
      panel: Panel;
      position?: EntityPosition;
    }
  
    interface Panel {
      guid?: string;
      name?: string;
      description?: string;
    }
  
    interface UpdateCampaignPanelRuleRequest {
      campaignPanelRule: CampaignPanelRule;
      position?: EntityPosition;
    }
  
    interface CreateDataFieldRequest {
      dataField: DataField;
    }
  
    interface ExportDataFieldsResponse {
      exportVersion?: number;
      fields?: DataFieldExt[];
    }
  
    interface UpdateDataFieldRequest {
      dataField: DataField;
    }
  
    interface CreateDataFieldEnumerationRequest {
      dataFieldEnumeration: DataFieldEnumeration;
    }
  
    interface UpdateDataFieldEnumerationRequest {
      dataFieldEnumeration: DataFieldEnumerationNoValues;
    }
  
    interface DataFieldEnumerationNoValues {
      guid?: string;
      name?: string;
      description?: string;
    }
  
    interface ReplaceDataFieldEnumerationValuesRequest {
      dataFieldEnumerationValues: DataFieldEnumerationValue[];
    }
  
    interface DialerStatusChangeRequest {
      previousDialerStatusKey?: string;
    }
  
    interface DialerStatusChangeResponse {
      action?: ActionType;
      notification?: DialerStatusChangeResponseNotification;
      dialerStatusKey?: string;
      newCall?: NewCallResponse;
    }
  
    enum ActionType {
      ResumePoll = 'ResumePoll',
      RemoteCallEnd = 'RemoteCallEnd',
      NewCall = 'NewCall',
    }
  
    interface NewCallResponse {
      call?: Call;
      panelFlow?: CallPanelFlow[];
      notes?: CallNote[];
      campaign?: Campaign;
      panels?: PanelWithContent[];
      dataSequenceNum?: number;
    }
  
    interface CallPanelFlow {
      callGuid?: string;
      panelGuid?: string;
      panelName?: string;
      panelDescription?: string;
      openDate?: Date;
    }
  
    interface NewTestCallRequest {
      agentId: string;
      leadExternalId?: string;
      campaignGuid?: string;
      resumePreviousCall?: boolean;
      dataItems: { [key: string]: string };
    }
  
    interface NewDialerCallRequest {
      callExternalId: string;
      leadExternalId: string;
      dataItems: { [key: string]: string };
    }
  
    interface Disposition {
      code?: string;
      displayName?: string;
      requiresCallbackTime?: boolean;
      requiresReason?: boolean;
      reasons?: DispositionReason[];
    }
  
    interface DispositionReason {
      code?: string;
      displayName?: string;
      requiresCompetitor?: boolean;
      requiresNote?: boolean;
    }
  
    interface DispositionCompetitor {
      code?: string;
      displayName?: string;
      requiresName?: boolean;
    }
  
    interface Lead {
      guid?: string;
      externalId?: string;
    }
  
    interface CreateLeadRequest {
      lead: Lead;
    }
  
    interface LeadContact {
      code?: string;
      isPrimary?: boolean;
      css?: string;
      number?: string;
    }
  
    interface UpdatePanelRequest {
      panel: Panel;
      position?: EntityPosition;
    }
  
    interface PanelReferencesResponse {
      numRefs?: number;
      campaignPanelRules?: CampaignPanelRuleRef[];
      panelRules?: PanelRuleRef[];
      panelGoToButtons?: PanelButtonRef[];
    }
  
    interface CampaignPanelRuleRef {
      campaignPanelRuleGuid?: string;
      ruleGuid?: string;
      ruleName?: string;
      ruleDescription?: string;
    }
  
    interface PanelRuleRef {
      panelGuid?: string;
      panelName?: string;
      panelDescription?: string;
      panelRuleGuid?: string;
      ruleGuid?: string;
      ruleName?: string;
      ruleDescription?: string;
    }
  
    interface PanelButtonRef {
      panelGuid?: string;
      panelName?: string;
      panelDescription?: string;
      panelButtonGuid?: string;
      buttonText?: string;
    }
  
    interface CreatePanelButtonRequest {
      panelButton: PanelButton;
      position?: EntityPosition;
    }
  
    interface ReplacePanelButtonsRequest {
      panelButtons: PanelButton[];
    }
  
    interface CreatePanelContentRequest {
      panelContent: PanelContent;
      position?: EntityPosition;
    }
  
    interface ReplacePanelContentsRequest {
      panelContents: PanelContent[];
    }
  
    interface PanelRule {
      guid?: string;
      panelGuid?: string;
      ruleGuid?: string;
      actionOpenPanelGuid?: string;
    }
  
    interface CreatePanelRuleRequest {
      panelRule: PanelRule;
      position?: EntityPosition;
    }
  
    interface UpdatePanelButtonRequest {
      panelButton: PanelButton;
      position?: EntityPosition;
    }
  
    interface UpdatePanelContentRequest {
      panelContent: PanelContent;
      position?: EntityPosition;
    }
  
    interface UpdatePanelRuleRequest {
      panelRule: PanelRule;
      position?: EntityPosition;
    }
  
    interface CreateRuleRequest {
      rule: ScripterRule;
    }
  
    interface ReplaceRuleRequest {
      rule: ScripterRule;
    }
  
    /** (required) reason for becoming unavailable */
    enum Reason {
      OnBreak = 'OnBreak',
      Unavailable = 'Unavailable',
      AtLunch = 'AtLunch',
      AwayFromDesk = 'AwayFromDesk',
      InAMeeting = 'InAMeeting',
      FollowUpTime = 'FollowUpTime',
    }
  
    enum DataFieldFieldType {
      Text = 'Text',
      Money = 'Money',
      Percentage = 'Percentage',
      Integer = 'Integer',
      Number = 'Number',
      Boolean = 'Boolean',
      Date = 'Date',
      DateTime = 'DateTime',
      Enumeration = 'Enumeration',
    }
  
    enum DataFieldExtFieldType {
      Text = 'Text',
      Money = 'Money',
      Percentage = 'Percentage',
      Integer = 'Integer',
      Number = 'Number',
      Boolean = 'Boolean',
      Date = 'Date',
      DateTime = 'DateTime',
      Enumeration = 'Enumeration',
    }
  
    enum DialerStatusChangeResponseNotification {
      LoggedOutFromDialer = 'LoggedOutFromDialer',
      LoggedIntoDialer = 'LoggedIntoDialer',
      WaitingForCall = 'WaitingForCall',
      AgentUnavailable = 'AgentUnavailable',
      DialPreview = 'DialPreview',
      Dialing = 'Dialing',
      DialFailed = 'DialFailed',
    }
  }
  